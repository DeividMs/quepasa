# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
    contents: write
    packages: write
    
jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        go-version: ["1.20"]
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Set up binary name 
      run: |
        BINARY_NAME=${{github.repository}}-${{matrix.goos}}-${{matrix.goarch}}
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

    - name: Install goimports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        export PATH="$HOME/go/bin:$PATH"
        
    - name: Build
      working-directory: ./src
      run: go build -o "$BINARY_NAME" -v ./...

    - name: Test
      working-directory: ./src
      run: go test -v ./...

    - name: Format
      run: if [ "$(goimports -s -l . | wc -l)" -gt 0 ]; then exit 1; fi
      if: matrix.go-version == 1.20
      
    - name: Release Notes
      run:
        git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
          
    - name: Release with Notes
      uses: softprops/action-gh-release@v2
      with:
        body_path: ".github/RELEASE-TEMPLATE.md"
        tag_name: $BINARY_NAME
